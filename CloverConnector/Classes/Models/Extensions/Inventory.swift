
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  public class Inventory {
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory9Attribute)public class Attribute: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of this attribute
      public var name: String?
      /// The item group this attribute belongs to
      public var itemGroup: CLVModels.Inventory.ItemGroup?
      /// Options associated with this attribute
      public var options: [CLVModels.Inventory.Option]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(itemGroup, forKey: "itemGroup")
        aCoder.encode(options, forKey: "options")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        itemGroup = aDecoder.decodeObject(forKey: "itemGroup") as? CLVModels.Inventory.ItemGroup
        options = aDecoder.decodeObject(forKey: "options") as? [CLVModels.Inventory.Option]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        itemGroup <- map["itemGroup"]
        options <- map["options.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Category)public class Category: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// 
      public var name: String?
      public var sortOrder: Int?
      /// Items associated with this category
      public var items: [CLVModels.Inventory.Item]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(sortOrder, forKey: "sortOrder")
        aCoder.encode(items, forKey: "items")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        sortOrder = aDecoder.decodeObject(forKey: "sortOrder") as? Int
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        sortOrder <- map["sortOrder"]
        items <- map["items.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory12CategoryItem)public class CategoryItem: NSObject, NSCoding, Mappable {
      public var item: CLVModels.Inventory.Item?
      public var category: CLVModels.Inventory.Category?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(item, forKey: "item")
        aCoder.encode(category, forKey: "category")
      }
      
      required public init(coder aDecoder: NSCoder) {
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
        category = aDecoder.decodeObject(forKey: "category") as? CLVModels.Inventory.Category
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        item <- map["item"]
        category <- map["category"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Discount)public class Discount: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the discount
      public var name: String?
      /// Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
      public var amount: Int?
      /// Discount amount in percent
      public var percentage: Int?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(percentage, forKey: "percentage")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        percentage = aDecoder.decodeObject(forKey: "percentage") as? Int
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        amount <- map["amount"]
        percentage <- map["percentage"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory4Item)public class Item: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// True if this item is hidden from register
      public var hidden: Bool?
      /// Reference to an item group
      public var itemGroup: CLVModels.Inventory.ItemGroup?
      /// Name of the item
      public var name: String?
      /// Alternate name of the item
      public var alternateName: String?
      /// Product code, e.g. UPC or EAN
      public var code: String?
      /// SKU of the item
      public var sku: String?
      /// Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
      public var price: Int?
      public var priceType: CLVModels.Inventory.PriceType? = nil
      /// Flag to indicate whether or not to use default tax rates
      public var defaultTaxRates: Bool?
      /// Unit name, e.g. oz, lb
      public var unitName: String?
      /// Cost of the item to merchant, as opposed to customer price
      public var cost: Int?
      /// True if this item should be counted as revenue, for example gift cards and donations would not
      public var isRevenue: Bool?
      public var taxRates: [CLVModels.Inventory.TaxRate]?
      public var modifierGroups: [CLVModels.Inventory.ModifierGroup]?
      /// Categories associated with this item
      public var categories: [CLVModels.Inventory.Category]?
      /// Tags associated with this item
      public var tags: [CLVModels.Inventory.Tag]?
      /// Item stock attribute that can be expanded to show stock quantity
      public var itemStock: CLVModels.Inventory.ItemStock?
      public var modifiedTime: Date?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(hidden, forKey: "hidden")
        aCoder.encode(itemGroup, forKey: "itemGroup")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(code, forKey: "code")
        aCoder.encode(sku, forKey: "sku")
        aCoder.encode(price, forKey: "price")
        aCoder.encode(priceType?.rawValue, forKey: "priceType")
        aCoder.encode(defaultTaxRates, forKey: "defaultTaxRates")
        aCoder.encode(unitName, forKey: "unitName")
        aCoder.encode(cost, forKey: "cost")
        aCoder.encode(isRevenue, forKey: "isRevenue")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(modifierGroups, forKey: "modifierGroups")
        aCoder.encode(categories, forKey: "categories")
        aCoder.encode(tags, forKey: "tags")
        aCoder.encode(itemStock, forKey: "itemStock")
        aCoder.encode(modifiedTime, forKey: "modifiedTime")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        hidden = aDecoder.decodeObject(forKey: "hidden") as? Bool
        itemGroup = aDecoder.decodeObject(forKey: "itemGroup") as? CLVModels.Inventory.ItemGroup
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        code = aDecoder.decodeObject(forKey: "code") as? String
        sku = aDecoder.decodeObject(forKey: "sku") as? String
        price = aDecoder.decodeObject(forKey: "price") as? Int
        if let priceTypeString = (aDecoder.decodeObject(forKey: "priceType") as? String) {
            priceType = CLVModels.Inventory.PriceType(rawValue: priceTypeString)
        }
        defaultTaxRates = aDecoder.decodeObject(forKey: "defaultTaxRates") as? Bool
        unitName = aDecoder.decodeObject(forKey: "unitName") as? String
        cost = aDecoder.decodeObject(forKey: "cost") as? Int
        isRevenue = aDecoder.decodeObject(forKey: "isRevenue") as? Bool
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Inventory.TaxRate]
        modifierGroups = aDecoder.decodeObject(forKey: "modifierGroups") as? [CLVModels.Inventory.ModifierGroup]
        categories = aDecoder.decodeObject(forKey: "categories") as? [CLVModels.Inventory.Category]
        tags = aDecoder.decodeObject(forKey: "tags") as? [CLVModels.Inventory.Tag]
        itemStock = aDecoder.decodeObject(forKey: "itemStock") as? CLVModels.Inventory.ItemStock
        modifiedTime = aDecoder.decodeObject(forKey: "modifiedTime") as? Date
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        hidden <- map["hidden"]
        itemGroup <- map["itemGroup"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        code <- map["code"]
        sku <- map["sku"]
        price <- map["price"]
        priceType <- map["priceType"]
        defaultTaxRates <- map["defaultTaxRates"]
        unitName <- map["unitName"]
        cost <- map["cost"]
        isRevenue <- map["isRevenue"]
        taxRates <- map["taxRates.elements"]
        modifierGroups <- map["modifierGroups.elements"]
        categories <- map["categories.elements"]
        tags <- map["tags.elements"]
        itemStock <- map["itemStock"]
        modifiedTime <- (map["modifiedTime"], CLVDateTransform())
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory9ItemGroup)public class ItemGroup: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the option
      public var name: String?
      /// Items that are members of this group
      public var items: [CLVModels.Inventory.Item]?
      /// Attributes that belong to this group
      public var attributes: [CLVModels.Inventory.Attribute]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(items, forKey: "items")
        aCoder.encode(attributes, forKey: "attributes")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
        attributes = aDecoder.decodeObject(forKey: "attributes") as? [CLVModels.Inventory.Attribute]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        items <- map["items.elements"]
        attributes <- map["attributes.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory17ItemModifierGroup)public class ItemModifierGroup: NSObject, NSCoding, Mappable {
      public var item: CLVModels.Inventory.Item?
      public var modifierGroup: CLVModels.Inventory.ModifierGroup?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(item, forKey: "item")
        aCoder.encode(modifierGroup, forKey: "modifierGroup")
      }
      
      required public init(coder aDecoder: NSCoder) {
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
        modifierGroup = aDecoder.decodeObject(forKey: "modifierGroup") as? CLVModels.Inventory.ModifierGroup
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        item <- map["item"]
        modifierGroup <- map["modifierGroup"]
      }
    }
    
    
    
    /// The class is used to update the item stock
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory9ItemStock)public class ItemStock: NSObject, NSCoding, Mappable {
      /// Reference to an item
      public var item: CLVModels.Inventory.Item?
      /// Current count of this item in stock
      public var quantity: Double?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(item, forKey: "item")
        aCoder.encode(quantity, forKey: "quantity")
      }
      
      required public init(coder aDecoder: NSCoder) {
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
        quantity = aDecoder.decodeObject(forKey: "quantity") as? Double
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        item <- map["item"]
        quantity <- map["quantity"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory8Modifier)public class Modifier: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the modifier
      public var name: String?
      /// Alternate name of the modifier
      public var alternateName: String?
      public var price: Int?
      public var modifierGroup: CLVModels.Inventory.ModifierGroup?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(price, forKey: "price")
        aCoder.encode(modifierGroup, forKey: "modifierGroup")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        price = aDecoder.decodeObject(forKey: "price") as? Int
        modifierGroup = aDecoder.decodeObject(forKey: "modifierGroup") as? CLVModels.Inventory.ModifierGroup
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        price <- map["price"]
        modifierGroup <- map["modifierGroup"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory13ModifierGroup)public class ModifierGroup: NSObject, NSCoding, Mappable {
      public var id: String?
      /// Name of the modifier group
      public var name: String?
      public var alternateName: String?
      public var minRequired: Int?
      public var maxAllowed: Int?
      public var showByDefault: Bool?
      public var modifiers: [CLVModels.Inventory.Modifier]?
      /// The ordered, comma-separated list of modifier ids in this group.
      public var modifierIds: String?
      public var items: [CLVModels.Inventory.Item]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(minRequired, forKey: "minRequired")
        aCoder.encode(maxAllowed, forKey: "maxAllowed")
        aCoder.encode(showByDefault, forKey: "showByDefault")
        aCoder.encode(modifiers, forKey: "modifiers")
        aCoder.encode(modifierIds, forKey: "modifierIds")
        aCoder.encode(items, forKey: "items")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        minRequired = aDecoder.decodeObject(forKey: "minRequired") as? Int
        maxAllowed = aDecoder.decodeObject(forKey: "maxAllowed") as? Int
        showByDefault = aDecoder.decodeObject(forKey: "showByDefault") as? Bool
        modifiers = aDecoder.decodeObject(forKey: "modifiers") as? [CLVModels.Inventory.Modifier]
        modifierIds = aDecoder.decodeObject(forKey: "modifierIds") as? String
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        minRequired <- map["minRequired"]
        maxAllowed <- map["maxAllowed"]
        showByDefault <- map["showByDefault"]
        modifiers <- map["modifiers.elements"]
        modifierIds <- map["modifierIds"]
        items <- map["items.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory6Option)public class Option: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the option
      public var name: String?
      public var attribute: CLVModels.Inventory.Attribute?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(attribute, forKey: "attribute")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        attribute = aDecoder.decodeObject(forKey: "attribute") as? CLVModels.Inventory.Attribute
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        attribute <- map["attribute"]
      }
    }
    
    
    
    /// This class represents the association between an item and an option
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory10OptionItem)public class OptionItem: NSObject, NSCoding, Mappable {
      /// Reference to an option
      public var option: CLVModels.Inventory.Option?
      /// Reference to an item
      public var item: CLVModels.Inventory.Item?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(option, forKey: "option")
        aCoder.encode(item, forKey: "item")
      }
      
      required public init(coder aDecoder: NSCoder) {
        option = aDecoder.decodeObject(forKey: "option") as? CLVModels.Inventory.Option
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        option <- map["option"]
        item <- map["item"]
      }
    }
    
    
    
    public enum PriceType: String {
      case FIXED
      case VARIABLE
      case PER_UNIT
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory3Tag)public class Tag: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Tag name
      public var name: String?
      /// Items associated with this tag
      public var items: [CLVModels.Inventory.Item]?
      /// Printers associated with this tag
      public var printers: [CLVModels.Printer.Printer]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(items, forKey: "items")
        aCoder.encode(printers, forKey: "printers")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
        printers = aDecoder.decodeObject(forKey: "printers") as? [CLVModels.Printer.Printer]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        items <- map["items.elements"]
        printers <- map["printers.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory7TagItem)public class TagItem: NSObject, NSCoding, Mappable {
      public var tag: CLVModels.Inventory.Tag?
      public var item: CLVModels.Inventory.Item?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(tag, forKey: "tag")
        aCoder.encode(item, forKey: "item")
      }
      
      required public init(coder aDecoder: NSCoder) {
        tag = aDecoder.decodeObject(forKey: "tag") as? CLVModels.Inventory.Tag
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        tag <- map["tag"]
        item <- map["item"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory10TagPrinter)public class TagPrinter: NSObject, NSCoding, Mappable {
      public var tag: CLVModels.Inventory.Tag?
      public var printer: CLVModels.Printer.Printer?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(tag, forKey: "tag")
        aCoder.encode(printer, forKey: "printer")
      }
      
      required public init(coder aDecoder: NSCoder) {
        tag = aDecoder.decodeObject(forKey: "tag") as? CLVModels.Inventory.Tag
        printer = aDecoder.decodeObject(forKey: "printer") as? CLVModels.Printer.Printer
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        tag <- map["tag"]
        printer <- map["printer"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory7TaxRate)public class TaxRate: NSObject, NSCoding, Mappable {
      public var id: String?
      /// The line item with which the tax rate is associated
      public var lineItemRef: CLVModels.Order.LineItem?
      public var name: String?
      public var rate: Int?
      public var isDefault: Bool?
      /// Items associated with this tax rate
      public var items: [CLVModels.Inventory.Item]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(lineItemRef, forKey: "lineItemRef")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(rate, forKey: "rate")
        aCoder.encode(isDefault, forKey: "isDefault")
        aCoder.encode(items, forKey: "items")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        lineItemRef = aDecoder.decodeObject(forKey: "lineItemRef") as? CLVModels.Order.LineItem
        name = aDecoder.decodeObject(forKey: "name") as? String
        rate = aDecoder.decodeObject(forKey: "rate") as? Int
        isDefault = aDecoder.decodeObject(forKey: "isDefault") as? Bool
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        lineItemRef <- map["lineItemRef"]
        name <- map["name"]
        rate <- map["rate"]
        isDefault <- map["isDefault"]
        items <- map["items.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels9Inventory11TaxRateItem)public class TaxRateItem: NSObject, NSCoding, Mappable {
      public var taxRate: CLVModels.Inventory.TaxRate?
      public var item: CLVModels.Inventory.Item?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(taxRate, forKey: "taxRate")
        aCoder.encode(item, forKey: "item")
      }
      
      required public init(coder aDecoder: NSCoder) {
        taxRate = aDecoder.decodeObject(forKey: "taxRate") as? CLVModels.Inventory.TaxRate
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        taxRate <- map["taxRate"]
        item <- map["item"]
      }
    }
    
  }
}
