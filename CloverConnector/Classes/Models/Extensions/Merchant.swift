
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  public class Merchant {
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant7Gateway)public class Gateway: NSObject, NSCoding, Mappable {
      public var paymentProcessorName: String?
      public var authorizationFrontEnd: String?
      public var acquiringBackEnd: String?
      public var paymentGatewayApi: String?
      public var accountName: String?
      public var mid: String?
      public var tid: String?
      public var storeId: String?
      public var supportsTipping: Bool?
      public var frontendMid: String?
      public var backendMid: String?
      public var supportsTipAdjust: Bool?
      public var supportsNakedCredit: Bool?
      public var supportsMultiPayToken: Bool?
      public var keyPrefix: String?
      public var keyInfo: [String:String]?
      public var closingTime: String?
      public var newBatchCloseEnabled: Bool?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(paymentProcessorName, forKey: "paymentProcessorName")
        aCoder.encode(authorizationFrontEnd, forKey: "authorizationFrontEnd")
        aCoder.encode(acquiringBackEnd, forKey: "acquiringBackEnd")
        aCoder.encode(paymentGatewayApi, forKey: "paymentGatewayApi")
        aCoder.encode(accountName, forKey: "accountName")
        aCoder.encode(mid, forKey: "mid")
        aCoder.encode(tid, forKey: "tid")
        aCoder.encode(storeId, forKey: "storeId")
        aCoder.encode(supportsTipping, forKey: "supportsTipping")
        aCoder.encode(frontendMid, forKey: "frontendMid")
        aCoder.encode(backendMid, forKey: "backendMid")
        aCoder.encode(supportsTipAdjust, forKey: "supportsTipAdjust")
        aCoder.encode(supportsNakedCredit, forKey: "supportsNakedCredit")
        aCoder.encode(supportsMultiPayToken, forKey: "supportsMultiPayToken")
        aCoder.encode(keyPrefix, forKey: "keyPrefix")
        aCoder.encode(keyInfo, forKey: "keyInfo")
        aCoder.encode(closingTime, forKey: "closingTime")
        aCoder.encode(newBatchCloseEnabled, forKey: "newBatchCloseEnabled")
      }
      
      required public init(coder aDecoder: NSCoder) {
        paymentProcessorName = aDecoder.decodeObject(forKey: "paymentProcessorName") as? String
        authorizationFrontEnd = aDecoder.decodeObject(forKey: "authorizationFrontEnd") as? String
        acquiringBackEnd = aDecoder.decodeObject(forKey: "acquiringBackEnd") as? String
        paymentGatewayApi = aDecoder.decodeObject(forKey: "paymentGatewayApi") as? String
        accountName = aDecoder.decodeObject(forKey: "accountName") as? String
        mid = aDecoder.decodeObject(forKey: "mid") as? String
        tid = aDecoder.decodeObject(forKey: "tid") as? String
        storeId = aDecoder.decodeObject(forKey: "storeId") as? String
        supportsTipping = aDecoder.decodeObject(forKey: "supportsTipping") as? Bool
        frontendMid = aDecoder.decodeObject(forKey: "frontendMid") as? String
        backendMid = aDecoder.decodeObject(forKey: "backendMid") as? String
        supportsTipAdjust = aDecoder.decodeObject(forKey: "supportsTipAdjust") as? Bool
        supportsNakedCredit = aDecoder.decodeObject(forKey: "supportsNakedCredit") as? Bool
        supportsMultiPayToken = aDecoder.decodeObject(forKey: "supportsMultiPayToken") as? Bool
        keyPrefix = aDecoder.decodeObject(forKey: "keyPrefix") as? String
        keyInfo = aDecoder.decodeObject(forKey: "keyInfo") as? [String:String]
        closingTime = aDecoder.decodeObject(forKey: "closingTime") as? String
        newBatchCloseEnabled = aDecoder.decodeObject(forKey: "newBatchCloseEnabled") as? Bool
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        paymentProcessorName <- map["paymentProcessorName"]
        authorizationFrontEnd <- map["authorizationFrontEnd"]
        acquiringBackEnd <- map["acquiringBackEnd"]
        paymentGatewayApi <- map["paymentGatewayApi"]
        accountName <- map["accountName"]
        mid <- map["mid"]
        tid <- map["tid"]
        storeId <- map["storeId"]
        supportsTipping <- map["supportsTipping"]
        frontendMid <- map["frontendMid"]
        backendMid <- map["backendMid"]
        supportsTipAdjust <- map["supportsTipAdjust"]
        supportsNakedCredit <- map["supportsNakedCredit"]
        supportsMultiPayToken <- map["supportsMultiPayToken"]
        keyPrefix <- map["keyPrefix"]
        keyInfo <- map["keyInfo"]
        closingTime <- map["closingTime"]
        newBatchCloseEnabled <- map["newBatchCloseEnabled"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant4Logo)public class Logo: NSObject, NSCoding, Mappable {
      /// The type of merchant logo
      public var logoType: CLVModels.Merchant.LogoType? = nil
      /// The filename of the logo
      public var logoFilename: String?
      /// URL of the logo file. Generated from filename.
      public var url: String?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(logoType?.rawValue, forKey: "logoType")
        aCoder.encode(logoFilename, forKey: "logoFilename")
        aCoder.encode(url, forKey: "url")
      }
      
      required public init(coder aDecoder: NSCoder) {
        if let logoTypeString =  (aDecoder.decodeObject(forKey: "logoType") as? String) {
            logoType = CLVModels.Merchant.LogoType(rawValue: logoTypeString)
        }
        logoFilename = aDecoder.decodeObject(forKey: "logoFilename") as? String
        url = aDecoder.decodeObject(forKey: "url") as? String
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        logoType <- map["logoType"]
        logoFilename <- map["logoFilename"]
        url <- map["url"]
      }
    }
    
    
    
    public enum LogoType: String {
      case BUSINESS
      case RECEIPT
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant8Merchant)public class Merchant: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// Name of the merchant
      public var name: String?
      /// The account that owns this merchant
      public var owner: CLVModels.Employees.Employee?
      /// The address of the merchant.
      public var address: CLVModels.Base.Address?
      public var merchantPlan: CLVModels.Merchant.MerchantPlan?
      public var defaultCurrency: String?
      public var phoneNumber: String?
      public var website: String?
      public var logos: [CLVModels.Merchant.Logo]?
      public var createdTime: Date?
      public var properties: CLVModels.Merchant.MerchantProperties?
      public var gateway: CLVModels.Merchant.Gateway?
      public var tipSuggestions: [CLVModels.Merchant.TipSuggestion]?
      /// This merchant's employees
      public var employees: [CLVModels.Employees.Employee]?
      /// This merchant's inventory items
      public var items: [CLVModels.Inventory.Item]?
      /// This merchant's inventory tags
      public var tags: [CLVModels.Inventory.Tag]?
      /// This merchant's supported tenders
      public var tenders: [CLVModels.Base.Tender]?
      /// This merchant's employees' shifts
      public var shifts: [CLVModels.Employees.Shift]?
      /// This merchant's orders
      public var orders: [CLVModels.Order.Order]?
      /// This merchant's order payments
      public var payments: [CLVModels.Payments.Payment]?
      public var taxRates: [CLVModels.Inventory.TaxRate]?
      public var printers: [CLVModels.Printer.Printer]?
      public var modifierGroups: [CLVModels.Inventory.ModifierGroup]?
      public var orderTypes: [CLVModels.Order.OrderType]?
      /// The merchant's reseller
      public var reseller: CLVModels.Base.Reference?
      /// This merchant's opening hours
      public var opening_hours: [CLVModels.Hours.HoursSet]?
      /// The business type of the merchant
      public var businessTypeCode: CLVModels.Base.BusinessTypeCode? = nil
      /// Returns true when the merchant is billable.
      public var isBillable: Bool?
      /// A list of devices a merchant owns
      public var devices: [CLVModels.Device.Device]?
      /// A list of merchant groups a merchant belongs to
      public var merchantGroups: [CLVModels.Developer.MerchantGroup]?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(owner, forKey: "owner")
        aCoder.encode(address, forKey: "address")
        aCoder.encode(merchantPlan, forKey: "merchantPlan")
        aCoder.encode(defaultCurrency, forKey: "defaultCurrency")
        aCoder.encode(phoneNumber, forKey: "phoneNumber")
        aCoder.encode(website, forKey: "website")
        aCoder.encode(logos, forKey: "logos")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(properties, forKey: "properties")
        aCoder.encode(gateway, forKey: "gateway")
        aCoder.encode(tipSuggestions, forKey: "tipSuggestions")
        aCoder.encode(employees, forKey: "employees")
        aCoder.encode(items, forKey: "items")
        aCoder.encode(tags, forKey: "tags")
        aCoder.encode(tenders, forKey: "tenders")
        aCoder.encode(shifts, forKey: "shifts")
        aCoder.encode(orders, forKey: "orders")
        aCoder.encode(payments, forKey: "payments")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(printers, forKey: "printers")
        aCoder.encode(modifierGroups, forKey: "modifierGroups")
        aCoder.encode(orderTypes, forKey: "orderTypes")
        aCoder.encode(reseller, forKey: "reseller")
        aCoder.encode(opening_hours, forKey: "opening_hours")
        aCoder.encode(businessTypeCode?.rawValue, forKey: "businessTypeCode")
        aCoder.encode(isBillable, forKey: "isBillable")
        aCoder.encode(devices, forKey: "devices")
        aCoder.encode(merchantGroups, forKey: "merchantGroups")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        owner = aDecoder.decodeObject(forKey: "owner") as? CLVModels.Employees.Employee
        address = aDecoder.decodeObject(forKey: "address") as? CLVModels.Base.Address
        merchantPlan = aDecoder.decodeObject(forKey: "merchantPlan") as? CLVModels.Merchant.MerchantPlan
        defaultCurrency = aDecoder.decodeObject(forKey: "defaultCurrency") as? String
        phoneNumber = aDecoder.decodeObject(forKey: "phoneNumber") as? String
        website = aDecoder.decodeObject(forKey: "website") as? String
        logos = aDecoder.decodeObject(forKey: "logos") as? [CLVModels.Merchant.Logo]
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        properties = aDecoder.decodeObject(forKey: "properties") as? CLVModels.Merchant.MerchantProperties
        gateway = aDecoder.decodeObject(forKey: "gateway") as? CLVModels.Merchant.Gateway
        tipSuggestions = aDecoder.decodeObject(forKey: "tipSuggestions") as? [CLVModels.Merchant.TipSuggestion]
        employees = aDecoder.decodeObject(forKey: "employees") as? [CLVModels.Employees.Employee]
        items = aDecoder.decodeObject(forKey: "items") as? [CLVModels.Inventory.Item]
        tags = aDecoder.decodeObject(forKey: "tags") as? [CLVModels.Inventory.Tag]
        tenders = aDecoder.decodeObject(forKey: "tenders") as? [CLVModels.Base.Tender]
        shifts = aDecoder.decodeObject(forKey: "shifts") as? [CLVModels.Employees.Shift]
        orders = aDecoder.decodeObject(forKey: "orders") as? [CLVModels.Order.Order]
        payments = aDecoder.decodeObject(forKey: "payments") as? [CLVModels.Payments.Payment]
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Inventory.TaxRate]
        printers = aDecoder.decodeObject(forKey: "printers") as? [CLVModels.Printer.Printer]
        modifierGroups = aDecoder.decodeObject(forKey: "modifierGroups") as? [CLVModels.Inventory.ModifierGroup]
        orderTypes = aDecoder.decodeObject(forKey: "orderTypes") as? [CLVModels.Order.OrderType]
        reseller = aDecoder.decodeObject(forKey: "reseller") as? CLVModels.Base.Reference
        opening_hours = aDecoder.decodeObject(forKey: "opening_hours") as? [CLVModels.Hours.HoursSet]
        if let businessTypeCodeString = (aDecoder.decodeObject(forKey: "businessTypeCode") as? String) {
            businessTypeCode = CLVModels.Base.BusinessTypeCode(rawValue: businessTypeCodeString)
        }
        isBillable = aDecoder.decodeObject(forKey: "isBillable") as? Bool
        devices = aDecoder.decodeObject(forKey: "devices") as? [CLVModels.Device.Device]
        merchantGroups = aDecoder.decodeObject(forKey: "merchantGroups") as? [CLVModels.Developer.MerchantGroup]
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        owner <- map["owner"]
        address <- map["address"]
        merchantPlan <- map["merchantPlan"]
        defaultCurrency <- map["defaultCurrency"]
        phoneNumber <- map["phoneNumber"]
        website <- map["website"]
        logos <- map["logos.elements"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        properties <- map["properties"]
        gateway <- map["gateway"]
        tipSuggestions <- map["tipSuggestions.elements"]
        employees <- map["employees.elements"]
        items <- map["items.elements"]
        tags <- map["tags.elements"]
        tenders <- map["tenders.elements"]
        shifts <- map["shifts.elements"]
        orders <- map["orders.elements"]
        payments <- map["payments.elements"]
        taxRates <- map["taxRates.elements"]
        printers <- map["printers.elements"]
        modifierGroups <- map["modifierGroups.elements"]
        orderTypes <- map["orderTypes.elements"]
        reseller <- map["reseller"]
        opening_hours <- map["opening_hours.elements"]
        businessTypeCode <- map["businessTypeCode"]
        isBillable <- map["isBillable"]
        devices <- map["devices.elements"]
        merchantGroups <- map["merchantGroups.elements"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant12MerchantPlan)public class MerchantPlan: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      /// The name of the merchant plan
      public var name: String?
      /// Description of the plan
      public var description_: String?
      public var price: Int?
      public var modules: [CLVModels.Merchant.Module]?
      public var appBundle: CLVModels.Apps.AppBundle?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(description_, forKey: "description_")
        aCoder.encode(price, forKey: "price")
        aCoder.encode(modules, forKey: "modules")
        aCoder.encode(appBundle, forKey: "appBundle")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        description_ = aDecoder.decodeObject(forKey: "description_") as? String
        price = aDecoder.decodeObject(forKey: "price") as? Int
        modules = aDecoder.decodeObject(forKey: "modules") as? [CLVModels.Merchant.Module]
        appBundle = aDecoder.decodeObject(forKey: "appBundle") as? CLVModels.Apps.AppBundle
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        description_ <- map["description"]
        price <- map["price"]
        modules <- map["modules.elements"]
        appBundle <- map["appBundle"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant18MerchantProperties)public class MerchantProperties: NSObject, NSCoding, Mappable {
      public var defaultCurrency: String?
      public var tipsEnabled: Bool?
      public var receiptProperties: String?
      public var summaryHour: Int?
      public var signatureThreshold: Int?
      public var hasDefaultEmployee: Bool?
      public var tipRateDefault: Int?
      public var onPaperTipSignatures: Bool?
      public var autoLogout: Bool?
      public var orderTitle: CLVModels.Merchant.OrderTitle? = nil
      public var orderTitleMax: Int?
      public var resetOnReportingTime: Bool?
      public var notesOnOrders: Bool?
      public var deleteOrders: Bool?
      public var removeTaxEnabled: Bool?
      public var groupLineItems: Bool?
      public var alternateInventoryNames: Bool?
      public var autoPrint: Bool?
      public var hardwareProfile: String?
      public var infoleaseSuppressBilling: Bool?
      public var infoleaseSuppressPlanBilling: Bool?
      public var shippingAddress: String?
      public var marketingEnabled: Bool?
      public var marketingPreferenceText: String?
      public var bankMarker: Int?
      public var supportPhone: String?
      public var supportEmail: String?
      public var manualCloseout: Bool?
      public var showCloseoutOrders: Bool?
      public var sendCloseoutEmail: Bool?
      public var stayInCategory: Bool?
      /// The locale of the merchant.
      public var locale: String?
      public var timezone: String?
      /// Whether this merchant is in a VAT country
      public var vat: Bool?
      /// The VAT tax name that is shown on receipts
      public var vatTaxName: String?
      /// Temporary while we are switching US billing systems
      public var appBillingSystem: String?
      /// The ABA Account Number.  Supplied by First Data.
      public var abaAccountNumber: String?
      /// The Masked DDA Account Number.  Supplied by First Data.
      public var ddaAccountNumber: String?
      public var trackStock: Bool?
      public var updateStock: Bool?
      public var allowClockOutWithOpenOrders: Bool?
      public var logInClockInPrompt: Bool?
      public var accountType: String?
      /// The business type of the merchant
      public var businessTypeCode: CLVModels.Base.BusinessTypeCode? = nil
      public var pinLength: Int?
      /// Whether cash back is enabled for this merchant
      public var cashBackEnabled: Bool?
      /// List of cash back possible cash back amounts
      public var cashBackOptions: String?
      /// The maximum amount of cash back that the customer can select.
      public var maxCashBack: Int?
      /// Merchant hierarchy (Business, Bank, Agent, Corp, Chain). Supplied by First Data.
      public var hierarchy: String?
      /// Whether or not merchant has consented to infolease billing
      public var hasConsented: Bool?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(defaultCurrency, forKey: "defaultCurrency")
        aCoder.encode(tipsEnabled, forKey: "tipsEnabled")
        aCoder.encode(receiptProperties, forKey: "receiptProperties")
        aCoder.encode(summaryHour, forKey: "summaryHour")
        aCoder.encode(signatureThreshold, forKey: "signatureThreshold")
        aCoder.encode(hasDefaultEmployee, forKey: "hasDefaultEmployee")
        aCoder.encode(tipRateDefault, forKey: "tipRateDefault")
        aCoder.encode(onPaperTipSignatures, forKey: "onPaperTipSignatures")
        aCoder.encode(autoLogout, forKey: "autoLogout")
        aCoder.encode(orderTitle?.rawValue, forKey: "orderTitle")
        aCoder.encode(orderTitleMax, forKey: "orderTitleMax")
        aCoder.encode(resetOnReportingTime, forKey: "resetOnReportingTime")
        aCoder.encode(notesOnOrders, forKey: "notesOnOrders")
        aCoder.encode(deleteOrders, forKey: "deleteOrders")
        aCoder.encode(removeTaxEnabled, forKey: "removeTaxEnabled")
        aCoder.encode(groupLineItems, forKey: "groupLineItems")
        aCoder.encode(alternateInventoryNames, forKey: "alternateInventoryNames")
        aCoder.encode(autoPrint, forKey: "autoPrint")
        aCoder.encode(hardwareProfile, forKey: "hardwareProfile")
        aCoder.encode(infoleaseSuppressBilling, forKey: "infoleaseSuppressBilling")
        aCoder.encode(infoleaseSuppressPlanBilling, forKey: "infoleaseSuppressPlanBilling")
        aCoder.encode(shippingAddress, forKey: "shippingAddress")
        aCoder.encode(marketingEnabled, forKey: "marketingEnabled")
        aCoder.encode(marketingPreferenceText, forKey: "marketingPreferenceText")
        aCoder.encode(bankMarker, forKey: "bankMarker")
        aCoder.encode(supportPhone, forKey: "supportPhone")
        aCoder.encode(supportEmail, forKey: "supportEmail")
        aCoder.encode(manualCloseout, forKey: "manualCloseout")
        aCoder.encode(showCloseoutOrders, forKey: "showCloseoutOrders")
        aCoder.encode(sendCloseoutEmail, forKey: "sendCloseoutEmail")
        aCoder.encode(stayInCategory, forKey: "stayInCategory")
        aCoder.encode(locale, forKey: "locale")
        aCoder.encode(timezone, forKey: "timezone")
        aCoder.encode(vat, forKey: "vat")
        aCoder.encode(vatTaxName, forKey: "vatTaxName")
        aCoder.encode(appBillingSystem, forKey: "appBillingSystem")
        aCoder.encode(abaAccountNumber, forKey: "abaAccountNumber")
        aCoder.encode(ddaAccountNumber, forKey: "ddaAccountNumber")
        aCoder.encode(trackStock, forKey: "trackStock")
        aCoder.encode(updateStock, forKey: "updateStock")
        aCoder.encode(allowClockOutWithOpenOrders, forKey: "allowClockOutWithOpenOrders")
        aCoder.encode(logInClockInPrompt, forKey: "logInClockInPrompt")
        aCoder.encode(accountType, forKey: "accountType")
        aCoder.encode(businessTypeCode?.rawValue, forKey: "businessTypeCode")
        aCoder.encode(pinLength, forKey: "pinLength")
        aCoder.encode(cashBackEnabled, forKey: "cashBackEnabled")
        aCoder.encode(cashBackOptions, forKey: "cashBackOptions")
        aCoder.encode(maxCashBack, forKey: "maxCashBack")
        aCoder.encode(hierarchy, forKey: "hierarchy")
        aCoder.encode(hasConsented, forKey: "hasConsented")
      }
      
      required public init(coder aDecoder: NSCoder) {
        defaultCurrency = aDecoder.decodeObject(forKey: "defaultCurrency") as? String
        tipsEnabled = aDecoder.decodeObject(forKey: "tipsEnabled") as? Bool
        receiptProperties = aDecoder.decodeObject(forKey: "receiptProperties") as? String
        summaryHour = aDecoder.decodeObject(forKey: "summaryHour") as? Int
        signatureThreshold = aDecoder.decodeObject(forKey: "signatureThreshold") as? Int
        hasDefaultEmployee = aDecoder.decodeObject(forKey: "hasDefaultEmployee") as? Bool
        tipRateDefault = aDecoder.decodeObject(forKey: "tipRateDefault") as? Int
        onPaperTipSignatures = aDecoder.decodeObject(forKey: "onPaperTipSignatures") as? Bool
        autoLogout = aDecoder.decodeObject(forKey: "autoLogout") as? Bool
        if let orderTitleString = (aDecoder.decodeObject(forKey: "orderTitle") as? String) {
            orderTitle = CLVModels.Merchant.OrderTitle(rawValue: orderTitleString)
        }
        orderTitleMax = aDecoder.decodeObject(forKey: "orderTitleMax") as? Int
        resetOnReportingTime = aDecoder.decodeObject(forKey: "resetOnReportingTime") as? Bool
        notesOnOrders = aDecoder.decodeObject(forKey: "notesOnOrders") as? Bool
        deleteOrders = aDecoder.decodeObject(forKey: "deleteOrders") as? Bool
        removeTaxEnabled = aDecoder.decodeObject(forKey: "removeTaxEnabled") as? Bool
        groupLineItems = aDecoder.decodeObject(forKey: "groupLineItems") as? Bool
        alternateInventoryNames = aDecoder.decodeObject(forKey: "alternateInventoryNames") as? Bool
        autoPrint = aDecoder.decodeObject(forKey: "autoPrint") as? Bool
        hardwareProfile = aDecoder.decodeObject(forKey: "hardwareProfile") as? String
        infoleaseSuppressBilling = aDecoder.decodeObject(forKey: "infoleaseSuppressBilling") as? Bool
        infoleaseSuppressPlanBilling = aDecoder.decodeObject(forKey: "infoleaseSuppressPlanBilling") as? Bool
        shippingAddress = aDecoder.decodeObject(forKey: "shippingAddress") as? String
        marketingEnabled = aDecoder.decodeObject(forKey: "marketingEnabled") as? Bool
        marketingPreferenceText = aDecoder.decodeObject(forKey: "marketingPreferenceText") as? String
        bankMarker = aDecoder.decodeObject(forKey: "bankMarker") as? Int
        supportPhone = aDecoder.decodeObject(forKey: "supportPhone") as? String
        supportEmail = aDecoder.decodeObject(forKey: "supportEmail") as? String
        manualCloseout = aDecoder.decodeObject(forKey: "manualCloseout") as? Bool
        showCloseoutOrders = aDecoder.decodeObject(forKey: "showCloseoutOrders") as? Bool
        sendCloseoutEmail = aDecoder.decodeObject(forKey: "sendCloseoutEmail") as? Bool
        stayInCategory = aDecoder.decodeObject(forKey: "stayInCategory") as? Bool
        locale = aDecoder.decodeObject(forKey: "locale") as? String
        timezone = aDecoder.decodeObject(forKey: "timezone") as? String
        vat = aDecoder.decodeObject(forKey: "vat") as? Bool
        vatTaxName = aDecoder.decodeObject(forKey: "vatTaxName") as? String
        appBillingSystem = aDecoder.decodeObject(forKey: "appBillingSystem") as? String
        abaAccountNumber = aDecoder.decodeObject(forKey: "abaAccountNumber") as? String
        ddaAccountNumber = aDecoder.decodeObject(forKey: "ddaAccountNumber") as? String
        trackStock = aDecoder.decodeObject(forKey: "trackStock") as? Bool
        updateStock = aDecoder.decodeObject(forKey: "updateStock") as? Bool
        allowClockOutWithOpenOrders = aDecoder.decodeObject(forKey: "allowClockOutWithOpenOrders") as? Bool
        logInClockInPrompt = aDecoder.decodeObject(forKey: "logInClockInPrompt") as? Bool
        accountType = aDecoder.decodeObject(forKey: "accountType") as? String
        if let businessTypeCodeString = (aDecoder.decodeObject(forKey: "businessTypeCode") as? String) {
          businessTypeCode = CLVModels.Base.BusinessTypeCode(rawValue: businessTypeCodeString)
        }
        pinLength = aDecoder.decodeObject(forKey: "pinLength") as? Int
        cashBackEnabled = aDecoder.decodeObject(forKey: "cashBackEnabled") as? Bool
        cashBackOptions = aDecoder.decodeObject(forKey: "cashBackOptions") as? String
        maxCashBack = aDecoder.decodeObject(forKey: "maxCashBack") as? Int
        hierarchy = aDecoder.decodeObject(forKey: "hierarchy") as? String
        hasConsented = aDecoder.decodeObject(forKey: "hasConsented") as? Bool
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        defaultCurrency <- map["defaultCurrency"]
        tipsEnabled <- map["tipsEnabled"]
        receiptProperties <- map["receiptProperties"]
        summaryHour <- map["summaryHour"]
        signatureThreshold <- map["signatureThreshold"]
        hasDefaultEmployee <- map["hasDefaultEmployee"]
        tipRateDefault <- map["tipRateDefault"]
        onPaperTipSignatures <- map["onPaperTipSignatures"]
        autoLogout <- map["autoLogout"]
        orderTitle <- map["orderTitle"]
        orderTitleMax <- map["orderTitleMax"]
        resetOnReportingTime <- map["resetOnReportingTime"]
        notesOnOrders <- map["notesOnOrders"]
        deleteOrders <- map["deleteOrders"]
        removeTaxEnabled <- map["removeTaxEnabled"]
        groupLineItems <- map["groupLineItems"]
        alternateInventoryNames <- map["alternateInventoryNames"]
        autoPrint <- map["autoPrint"]
        hardwareProfile <- map["hardwareProfile"]
        infoleaseSuppressBilling <- map["infoleaseSuppressBilling"]
        infoleaseSuppressPlanBilling <- map["infoleaseSuppressPlanBilling"]
        shippingAddress <- map["shippingAddress"]
        marketingEnabled <- map["marketingEnabled"]
        marketingPreferenceText <- map["marketingPreferenceText"]
        bankMarker <- map["bankMarker"]
        supportPhone <- map["supportPhone"]
        supportEmail <- map["supportEmail"]
        manualCloseout <- map["manualCloseout"]
        showCloseoutOrders <- map["showCloseoutOrders"]
        sendCloseoutEmail <- map["sendCloseoutEmail"]
        stayInCategory <- map["stayInCategory"]
        locale <- map["locale"]
        timezone <- map["timezone"]
        vat <- map["vat"]
        vatTaxName <- map["vatTaxName"]
        appBillingSystem <- map["appBillingSystem"]
        abaAccountNumber <- map["abaAccountNumber"]
        ddaAccountNumber <- map["ddaAccountNumber"]
        trackStock <- map["trackStock"]
        updateStock <- map["updateStock"]
        allowClockOutWithOpenOrders <- map["allowClockOutWithOpenOrders"]
        logInClockInPrompt <- map["logInClockInPrompt"]
        accountType <- map["accountType"]
        businessTypeCode <- map["businessTypeCode"]
        pinLength <- map["pinLength"]
        cashBackEnabled <- map["cashBackEnabled"]
        cashBackOptions <- map["cashBackOptions"]
        maxCashBack <- map["maxCashBack"]
        hierarchy <- map["hierarchy"]
        hasConsented <- map["hasConsented"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant6Module)public class Module: NSObject, NSCoding, Mappable {
      /// Unique identifier
      public var id: String?
      public var name: String?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
      }
    }
    
    
    
    public enum OrderTitle: String {
      case NONE
      case MANUAL
      case AUTOMATIC
    }
    
    
    
    public enum SyncLevel: String {
      case LOW
      case MEDIUM
      case HIGH
      case NONE
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant12SyncSettings)public class SyncSettings: NSObject, NSCoding, Mappable {
      /// Sync authoirty
      public var authority: String?
      /// The minumum sync level rquired for this authority
      public var level: CLVModels.Merchant.SyncLevel? = nil
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(authority, forKey: "authority")
        aCoder.encode(level?.rawValue, forKey: "level")
      }
      
      required public init(coder aDecoder: NSCoder) {
        authority = aDecoder.decodeObject(forKey: "authority") as? String
        if let levelString = (aDecoder.decodeObject(forKey: "level") as? String) {
            level = CLVModels.Merchant.SyncLevel(rawValue: levelString)
        }
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        authority <- map["authority"]
        level <- map["level"]
      }
    }
    
    
    
    @objc(_TtCCC15CloverConnector9CLVModels8Merchant13TipSuggestion)public class TipSuggestion: NSObject, NSCoding, Mappable {
      public var id: String?
      /// Name of the tip
      public var name: String?
      /// Suggested tip percentage
      public var percentage: Int?
      public var amount: Int?
      public var isEnabled: Bool?
      
      public func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(percentage, forKey: "percentage")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(isEnabled, forKey: "isEnabled")
      }
      
      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        percentage = aDecoder.decodeObject(forKey: "percentage") as? Int
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        isEnabled = aDecoder.decodeObject(forKey: "isEnabled") as? Bool
      }
      
      override public init() {}
      
      // Mappable
      
      required public init?(map:Map) {}
      
      public func mapping(map:Map) {
        id <- map["id"]
        name <- map["name"]
        percentage <- (map["percentage"], fixJsonNumberTypeDisorder)
        amount <- (map["amount"], fixJsonNumberTypeDisorder)
        isEnabled <- (map["isEnabled"], fixJsonBoolTypeDisorder)
      }
        
        /// Take either a string or an Bool for booleans... because sometimes we have to deal with crappy JSON APIs that gives us a literal "true" as a boolean  🤦‍♂️
        let fixJsonBoolTypeDisorder = TransformOf<Bool, Any>(fromJSON: { (value: Any?) -> Bool? in
            if let stringValue = value as? String {
                if stringValue == "true" {
                    return true
                } else if stringValue == "false" {
                    return false
                } else {
                    return nil
                }
            }
            
            if let boolValue = value as? Bool {
                return boolValue
            }

            //probably came in as either a string or a bool, so we won't bother fretting over any other type
            return nil
        }, toJSON: { (value: Bool?) -> Bool? in
            return value
        })
        
        
        /// Take either a string or an Int for numbers... because sometimes we have to deal with crappy JSON APIs that gives us a literal "5" as a number  🤦‍♂️
        let fixJsonNumberTypeDisorder = TransformOf<Int, Any>(fromJSON: { (value: Any?) -> Int? in
            if let stringValue = value as? String {
                return Int(stringValue)
            }
            
            if let intValue = value as? Int {
                return intValue
            }

            //probably came in as either a string or a number, so we won't bother fretting over any other type
            return nil
        }, toJSON: { (value: Int?) -> Int? in
            return value
        })
    }
  }
}
